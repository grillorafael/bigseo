{"name":"BigSEO","tagline":"BigSEO is a ExpresJS module built for apps who need a SEO Engine exclusively for web crawlers such as Google, Bing, Facebook, etc.","body":"# BigSEO\r\n\r\nBigSEO is a ExpresJS module built for apps who need a SEO Engine exclusively for web crawlers such as Google, Bing, Facebook, etc.\r\n\r\nBigSEO is a simple middleware for expressjs to handle crawler requests.\r\n\r\n```npm install bigseo --save```\r\n\r\nThings you can make crawlers see if you use BigSEO:\r\n\r\n1. AngularJS rendered pages\r\n1. Disqus comments\r\n1. Facebook comments\r\n1. Javascript dom modifications\r\n1. etc\r\n\r\nThings you can do if you use BigSEO:\r\n\r\n1. Add crawlers meta tags via javascript\r\n1. Load your content through AJAX\r\n1. Write AngularJS applications with no worries about SEO\r\n1. etc\r\n\r\n\r\n###TODO:\r\n1. List robots user agents\r\n1. Work without jquery\r\n1. Other language compatibility\r\n\r\n## How it works\r\nWhen you receive a new request, this request is processed in BigSEO's middleware to detect whether the request if from a browser or a Bot. If we detect that the request came from a Bot, we check if there is a cached version of the requested URL. If there is, we deliver the cache, if there is not, we proceed with the request.\r\n\r\nThe cache is generate by users when they navigate your website so you can always have a updated version of the page.\r\n\r\n## ExpressJS 4.x\r\n\r\nIt is very simple to use BigSEO. Under your server application, insert this code snippet right before your route definitions. From now on, we will route every crawler request directly to an existing cache. If there is no cache, we will proceed with the request to the default response.\r\n\r\n```javascript\r\nvar bigSeo = require('bigseo')();\r\n// Your application config\r\napp.use(bigSeo.run());\r\n// Your application routes\r\n```\r\n\r\nBigSEO have a few optional configurations that you can put in the constructor.\r\n\r\n```javascript\r\n// Default values\r\nopts = {\r\n    log: true,\r\n    cache_url: '/save/cache',\r\n    cache_path: 'caches'\r\n};\r\n```\r\n\r\nEx: ```var bigSeo = require('bigseo')({log: false});```\r\n\r\nAt the moment you start your express application, BigSEO will create by default a ```caches/``` where it will save the cached content.\r\n\r\nThe cache name is a base64.html generated from the saved url.\r\n\r\n## ExpressJS 3.x\r\nSimilar to 4.x\r\n```javascript\r\nvar bigSeo = require('bigseo')();\r\n// Your app config\r\napp.use(bigSeo.middleware);\r\napp.post('/save/cache', bigSeo.cache);\r\napp.get('/bigseo/bigseo.js', bigSeo.staticJS);\r\napp.get('/bigseo/angular-bigseo.js', bigSeo.angularJS);\r\n// Your app routes\r\n```\r\n\r\n## Saving your cache\r\n\r\nNow, in order to build your cache, just put this tag on the html page you want to be ativated.\r\n\r\n```html\r\n<script src='/bigseo/bigseo.js'></script>\r\n```\r\n\r\nAnd run the save method when you think the DOM is ready to be saved.\r\n```javascript\r\nvar bigSeo = new BigSEO();\r\nbigSeo.save(); // Call when you think its ready to save a new cache\r\n```\r\n\r\nThe save method accepts 2 parameters, the success and the error callback in that specific order.\r\n\r\n\r\nThe BigSEO client construct also accepts a ```opts``` parameter with the following default value:\r\n```javascript\r\nopts = {\r\n    url: '/save/cache'\r\n};\r\n```\r\n\r\nEx: ```var bigSeo = new BigSEO({url: '/cache'});```\r\n\r\n**Warning: If you change the save path on your express application, your also have to change in the client settings**\r\n\r\n## Using with angularjs\r\nImport BigSEO's AngularJS module\r\n```html\r\n<script src='/bigseo/angular-bigseo.js'></script>\r\n```\r\n\r\nAdd to your application modules\r\n```javascript\r\nvar yourApp = angular.module('yourApp', ['bigseo']);\r\n```\r\n\r\nAdd to your Controller and call it when you have everything loaded\r\n```javascript\r\nangular.module('test').controller('IndexCtrl', ['$scope', '$location', 'API', 'bigseo', function($scope, $location, API, bigseo) {\r\n    API.list().\r\n        success(function (data, status, headers, config) {\r\n            $scope.beers = data.beers;\r\n            bigseo.save();\r\n        }).\r\n        error(function (data, status, headers, config) {\r\n        });\r\n}]);\r\n\r\n```\r\n\r\n## user-agents reference\r\nThe user agents reference can be found [here](http://user-agent-string.info/list-of-ua/bots).\r\n\r\nYou can find the list of implemented user agents [here](https://github.com/grillorafael/bigseo/blob/master/index.js).\r\n\r\nPlease **contribute** by adding more relevant items to the list!  \r\n\r\n## LICENSE\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) [2014] [Rafael Grillo Abreu]\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"UA-12680190-9","note":"Don't delete this file! It's used internally to help with page regeneration."}